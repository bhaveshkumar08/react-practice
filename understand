const express = require("express");
var cookieParser = require('cookie-parser');
const path = require("path");
const open = require("open");
const compression = require("compression");
const cors = require("cors");
const logger = require("morgan");
const { preloadAll } = require("@react-loadable/revised");
import { createProxyMiddleware } from 'http-proxy-middleware';
const webpack = require("webpack");
const https = require("https");
const fs = require("fs");
const device = require('express-device');
const loadConfig = require("./helpers/loadConfig");
const { getPlatformFromRequest } = require("./utils/requestContext");
const resourcesConfigLoader = require("./helpers/resourcesConfigLoader");
const { replaceConfigSettings } = require("./helpers/htmlUtility");
const airRouter = require("./airRouter");
const { initTimer } = require("@common/frontend-configuration/lib/refresh");
const helmet = require('helmet');

const isEnableSsl = true;
const app = express();
app.use(helmet.hsts({
    maxAge: 31536000,
    includeSubDomains: false,
    preload: true,
    force: true,
}));
app.use(device.capture());
if (global.MIDDLEWARE_URL) {
    app.use('/airautosuggestapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/api', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/airpaymentapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/baggageapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/seatapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/clubmiles', createProxyMiddleware({
        target: global.MIDDLEWARE_URL, changeOrigin: true,
        onProxyReq: (request) => request.setHeader("origin", global.MIDDLEWARE_URL)
    }));
    app.use('/clubmiles-auth', createProxyMiddleware({
        target: global.MIDDLEWARE_URL, changeOrigin: true,
        onProxyReq: (request) => request.setHeader("origin", global.MIDDLEWARE_URL)
    }));
    app.use('/additionalserviceapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/appsetting', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/saverClubMembershipApi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/airsettingapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
}
if (global.AIR_API_URL) {
    app.use('/airsearchapi', createProxyMiddleware({
        target: global.AIR_API_URL,
        changeOrigin: true,
    }));
}
app.use(cookieParser());
// set no-cache header for all requests.
app.use(function (req, res, next) {
    res.header("Cache-Control", "private, no-cache, no-store, must-revalidate");
    res.header("Expires", "-1");
    next();
});

process.on("unhandledRejection", (err) => {
    throw err;
});

app.use(logger("dev"));
app.use(compression());
app.use(cors());

let config;
if (process.env.ENABLE_ANALYZER) {
    config = require("../webpack/webpack.config.analyzer");
} else {
    config = require("../webpack/webpack.config.dev");
}
const compiler = webpack(config);
const devMiddlewareInstance = require("webpack-dev-middleware")(compiler, {
    publicPath: config.output.publicPath,
});
app.use(devMiddlewareInstance);
app.use(require("webpack-hot-middleware")(compiler));

/* eslint-disable no-console */
app.use(global.URL_PREFIX, airRouter);

app.use("/*", renderHtmlRoute);

initApp()
    .then(() => {
        console.log("Loading Configuration");
        const configsToLoad = global.configsToLoad || {
            PAGE_RESOURCES: true,
            SETTINGS: true,
            LAUNCHPAD_CONFIG: false,
        };
        console.log("default config load", configsToLoad);
        return loadConfig(configsToLoad, devMiddlewareInstance, compiler);
    })
    .then(() => initTimer("web"))
    .then(preloadAll)
    .then(() => {
        if (isEnableSsl) {
            const privateKey = fs.readFileSync("./key.pem");
            const certificate = fs.readFileSync("./cert.pem");
            const credentials = {
                key: privateKey,
                cert: certificate,
                passphrase: "aaaa1234",
            };
            const httpsServer = https.createServer(credentials, app);
            httpsServer.listen(8443, function (err) {
                if (err) {
                    process.exit(1);
                } else {
                    open(`https://localhost:8443/`);
                }
            });
        }
        app.listen(3020, function (err) {
            if (err) {
                process.exit(1);
            } else {
                open(`http://localhost:3020/`);
            }
        });
    })
    .catch(() => {
        process.exit(1);
    });

function initApp() {
    return new Promise((resolve, reject) => {
        const filename = path.join(compiler.outputPath, "index.html");
        devMiddlewareInstance.waitUntilValid(() => {
            compiler.outputFileSystem.readFile(filename, function (err, content) {
                if (err) {
                    return reject(err);
                }
                resolve(true);
            });
        });
    });
}

function renderHtmlRoute(req, res, next) {
    const culture = resourcesConfigLoader.getCultureFromRequest(req);
    const filename = path.join(compiler.outputPath, "index.html");
    const platform = getPlatformFromRequest(req);
    devMiddlewareInstance.waitUntilValid(() => {
        compiler.outputFileSystem.readFile(filename, function (err, result) {
            if (err) {
                return next(err);
            }
            replaceConfigSettings(result.toString(), culture, platform).then((newContent) => {
                res.set("content-type", "text/html");
                res.send(newContent);
                res.end();
            });
        });
    });
}

export const getAffirmSDK = () => {
    if (!document.getElementById('affirmSettings')) {
        const isPassAffirmData = window.cockpitSetting.ApplicationSettings.isPassAffirmData        
        const iDiv = document.createElement('script');
        iDiv.id = 'affirmSettings';
        const countryCode = window.appSettings.portalId === 93 ? "CAN" : "USA";
        const affirmData = isPassAffirmData ? ",locale:'" + window.appSettings.pixelCulture.replace("-","_") + "',country_code:'" + countryCode + "'" : "";
        let strSDK = " _affirm_config = { public_api_key: '" + window.cockpitSetting.ApplicationSettings.AffirmApiKey + "', script: '" + window.cockpitSetting.ApplicationSettings.AffirmApiUrl + "'," +
            "session_id: 'b4b9905b-6269-4b43-ac0c-b5139ef9c7b9'"+affirmData+"}; ";
        strSDK = strSDK + " (function (l, g, m, e, a, f, b)" +
            "{ var d, c = l[m] || {}, h = document.createElement(f), n = document.getElementsByTagName(f)[0], k = function (a, b, c) { return function () " +
            "{ a[b]._.push([c, arguments]) }};" +
            "c[e] = k(c, e, 'set'); d = c[e]; c[a] = {}; c[a]._ = []; d._ = []; c[a][b] = k(c, a, b); a = 0; for (b = 'set add save post open empty reset on off trigger ready setProduct'.split(' '); a < b.length; a++) d[b[a]] = k(c, e, b[a]);" +
            "a = 0; for (b = ['get', 'token', 'url', 'items']; a < b.length; a++)d[b[a]] = function () { };" +
            "h.async = !0; h.src = g[f]; n.parentNode.insertBefore(h, n); delete g[f]; d(g);" +
            "l[m] = c }) (window, _affirm_config, 'affirm', 'checkout', 'ui', 'script', 'ready');";
        iDiv.innerHTML = strSDK;
        document.head.appendChild(iDiv);
    }
};

import { helpers } from '@common/react-lib/lib/utils';
const ChatSdk = (function () {
    const init = () => {
        const initializeNewSdkV2 = window.cockpitSetting?.ApplicationSettings?.ChatSdkVersion === 2;
        if (!initializeNewSdkV2 || window.ChatBotSDK) return;
        const s = [].slice;
        window.ChatBotSDK = {
            eventHistory: [], //q
            executeEventHistory: null, //fn
            on: function () {
                handleArgs(["on", s.call(arguments)]);
            },
            off: function () {
                handleArgs(["off", s.call(arguments)]);
            },
            event: function () {
                handleArgs(["event", s.call(arguments)]);
            },
            page: function () {
                handleArgs(["page", s.call(arguments)]);
            },
            test: function () {
                handleArgs(["test", s.call(arguments)]);
            },
            openBot: function () {
                handleArgs(["openBot"]);
            }
        }
        const isDesktop = window.platform === 'desktop';
        const parsedValue = JSON.parse(window.cockpitSetting.ApplicationSettings.chatScriptUrl);
        const iframescripturl = parsedValue.sdkV2;
        helpers.loadScriptAsync(iframescripturl, 'chatSdk2');
        window.chatbotAsyncInit = function () {
            ChatBotSDK.init({
                clientId: window.appSettings.portalId,
                platform: isDesktop ? 0 : 1,
                flowTag: 'new_list', sourceTag: 'listing_page',
                toolTipText: "Need Help? Chat with our<br/>certified Travel Expert Now!",
                logEvent: null, 
                chatBotEvent: null,
                layoutSettingIcon, layoutSettingIfame, layoutSettingIconToolTip
            }, function () {
               if (ChatBotSDK.eventHistory.length > 0) {
                    ChatBotSDK.eventHistory.forEach(element => {
                        ChatBotSDK.executeEventHistory.apply(null, element);
                    });
                }
            });
        }
       
    }
    const layoutSettingIcon = {
        height: "55px",
        width: "55px",
        bottom: "0px",
        position: "fixed",
        right: "0px",
        border: "none",
        display: "block"
    }
    const layoutSettingIfame = {
        height: "100%",
        width: "100%",
        zIndex: "100"
    }
    const layoutSettingIconToolTip = {
        height: "60px",
        width: "21rem",
        bottom: "0px",
        position: "fixed",
        right: "0px",
        border: "none",
        display: "block"
    }
    const handleArgs = (args) => {
        if (ChatBotSDK.executeEventHistory) {
            ChatBotSDK.executeEventHistory.apply(null, args);
        } else {
            ChatBotSDK.eventHistory.push(args);
        }
    }
    const tracking = (setChatIconShown) => {
        const chatIconShownTrue = () => {
            setChatIconShown && setChatIconShown(true);
        };
        window.ChatBotSDK.off("iframe-rendered", chatIconShownTrue);

        window.ChatBotSDK.on("iframe-rendered", chatIconShownTrue);
    };
    return { init, tracking };
})();
export default ChatSdk;

