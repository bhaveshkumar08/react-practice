const express = require("express");
var cookieParser = require('cookie-parser');
const path = require("path");
const open = require("open");
const compression = require("compression");
const cors = require("cors");
const logger = require("morgan");
const { preloadAll } = require("@react-loadable/revised");
import { createProxyMiddleware } from 'http-proxy-middleware';
const webpack = require("webpack");
const https = require("https");
const fs = require("fs");
const device = require('express-device');
const loadConfig = require("./helpers/loadConfig");
const { getPlatformFromRequest } = require("./utils/requestContext");
const resourcesConfigLoader = require("./helpers/resourcesConfigLoader");
const { replaceConfigSettings } = require("./helpers/htmlUtility");
const airRouter = require("./airRouter");
const { initTimer } = require("@common/frontend-configuration/lib/refresh");
const helmet = require('helmet');

const isEnableSsl = true;
const app = express();
app.use(helmet.hsts({
    maxAge: 31536000,
    includeSubDomains: false,
    preload: true,
    force: true,
}));
app.use(device.capture());
if (global.MIDDLEWARE_URL) {
    app.use('/airautosuggestapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/api', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/airpaymentapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/baggageapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/seatapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/clubmiles', createProxyMiddleware({
        target: global.MIDDLEWARE_URL, changeOrigin: true,
        onProxyReq: (request) => request.setHeader("origin", global.MIDDLEWARE_URL)
    }));
    app.use('/clubmiles-auth', createProxyMiddleware({
        target: global.MIDDLEWARE_URL, changeOrigin: true,
        onProxyReq: (request) => request.setHeader("origin", global.MIDDLEWARE_URL)
    }));
    app.use('/additionalserviceapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/appsetting', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/saverClubMembershipApi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
    app.use('/airsettingapi', createProxyMiddleware({ target: global.MIDDLEWARE_URL, changeOrigin: true }));
}
if (global.AIR_API_URL) {
    app.use('/airsearchapi', createProxyMiddleware({
        target: global.AIR_API_URL,
        changeOrigin: true,
    }));
}
app.use(cookieParser());
// set no-cache header for all requests.
app.use(function (req, res, next) {
    res.header("Cache-Control", "private, no-cache, no-store, must-revalidate");
    res.header("Expires", "-1");
    next();
});

process.on("unhandledRejection", (err) => {
    throw err;
});

app.use(logger("dev"));
app.use(compression());
app.use(cors());

let config;
if (process.env.ENABLE_ANALYZER) {
    config = require("../webpack/webpack.config.analyzer");
} else {
    config = require("../webpack/webpack.config.dev");
}
const compiler = webpack(config);
const devMiddlewareInstance = require("webpack-dev-middleware")(compiler, {
    publicPath: config.output.publicPath,
});
app.use(devMiddlewareInstance);
app.use(require("webpack-hot-middleware")(compiler));

/* eslint-disable no-console */
app.use(global.URL_PREFIX, airRouter);

app.use("/*", renderHtmlRoute);

initApp()
    .then(() => {
        console.log("Loading Configuration");
        const configsToLoad = global.configsToLoad || {
            PAGE_RESOURCES: true,
            SETTINGS: true,
            LAUNCHPAD_CONFIG: false,
        };
        console.log("default config load", configsToLoad);
        return loadConfig(configsToLoad, devMiddlewareInstance, compiler);
    })
    .then(() => initTimer("web"))
    .then(preloadAll)
    .then(() => {
        if (isEnableSsl) {
            const privateKey = fs.readFileSync("./key.pem");
            const certificate = fs.readFileSync("./cert.pem");
            const credentials = {
                key: privateKey,
                cert: certificate,
                passphrase: "aaaa1234",
            };
            const httpsServer = https.createServer(credentials, app);
            httpsServer.listen(8443, function (err) {
                if (err) {
                    process.exit(1);
                } else {
                    open(`https://localhost:8443/`);
                }
            });
        }
        app.listen(3020, function (err) {
            if (err) {
                process.exit(1);
            } else {
                open(`http://localhost:3020/`);
            }
        });
    })
    .catch(() => {
        process.exit(1);
    });

function initApp() {
    return new Promise((resolve, reject) => {
        const filename = path.join(compiler.outputPath, "index.html");
        devMiddlewareInstance.waitUntilValid(() => {
            compiler.outputFileSystem.readFile(filename, function (err, content) {
                if (err) {
                    return reject(err);
                }
                resolve(true);
            });
        });
    });
}

function renderHtmlRoute(req, res, next) {
    const culture = resourcesConfigLoader.getCultureFromRequest(req);
    const filename = path.join(compiler.outputPath, "index.html");
    const platform = getPlatformFromRequest(req);
    devMiddlewareInstance.waitUntilValid(() => {
        compiler.outputFileSystem.readFile(filename, function (err, result) {
            if (err) {
                return next(err);
            }
            replaceConfigSettings(result.toString(), culture, platform).then((newContent) => {
                res.set("content-type", "text/html");
                res.send(newContent);
                res.end();
            });
        });
    });
}

export const getAffirmSDK = () => {
    if (!document.getElementById('affirmSettings')) {
        const isPassAffirmData = window.cockpitSetting.ApplicationSettings.isPassAffirmData        
        const iDiv = document.createElement('script');
        iDiv.id = 'affirmSettings';
        const countryCode = window.appSettings.portalId === 93 ? "CAN" : "USA";
        const affirmData = isPassAffirmData ? ",locale:'" + window.appSettings.pixelCulture.replace("-","_") + "',country_code:'" + countryCode + "'" : "";
        let strSDK = " _affirm_config = { public_api_key: '" + window.cockpitSetting.ApplicationSettings.AffirmApiKey + "', script: '" + window.cockpitSetting.ApplicationSettings.AffirmApiUrl + "'," +
            "session_id: 'b4b9905b-6269-4b43-ac0c-b5139ef9c7b9'"+affirmData+"}; ";
        strSDK = strSDK + " (function (l, g, m, e, a, f, b)" +
            "{ var d, c = l[m] || {}, h = document.createElement(f), n = document.getElementsByTagName(f)[0], k = function (a, b, c) { return function () " +
            "{ a[b]._.push([c, arguments]) }};" +
            "c[e] = k(c, e, 'set'); d = c[e]; c[a] = {}; c[a]._ = []; d._ = []; c[a][b] = k(c, a, b); a = 0; for (b = 'set add save post open empty reset on off trigger ready setProduct'.split(' '); a < b.length; a++) d[b[a]] = k(c, e, b[a]);" +
            "a = 0; for (b = ['get', 'token', 'url', 'items']; a < b.length; a++)d[b[a]] = function () { };" +
            "h.async = !0; h.src = g[f]; n.parentNode.insertBefore(h, n); delete g[f]; d(g);" +
            "l[m] = c }) (window, _affirm_config, 'affirm', 'checkout', 'ui', 'script', 'ready');";
        iDiv.innerHTML = strSDK;
        document.head.appendChild(iDiv);
    }
};

import { helpers } from '@common/react-lib/lib/utils';
const ChatSdk = (function () {
    const init = () => {
        const initializeNewSdkV2 = window.cockpitSetting?.ApplicationSettings?.ChatSdkVersion === 2;
        if (!initializeNewSdkV2 || window.ChatBotSDK) return;
        const s = [].slice;
        window.ChatBotSDK = {
            eventHistory: [], //q
            executeEventHistory: null, //fn
            on: function () {
                handleArgs(["on", s.call(arguments)]);
            },
            off: function () {
                handleArgs(["off", s.call(arguments)]);
            },
            event: function () {
                handleArgs(["event", s.call(arguments)]);
            },
            page: function () {
                handleArgs(["page", s.call(arguments)]);
            },
            test: function () {
                handleArgs(["test", s.call(arguments)]);
            },
            openBot: function () {
                handleArgs(["openBot"]);
            }
        }
        const isDesktop = window.platform === 'desktop';
        const parsedValue = JSON.parse(window.cockpitSetting.ApplicationSettings.chatScriptUrl);
        const iframescripturl = parsedValue.sdkV2;
        helpers.loadScriptAsync(iframescripturl, 'chatSdk2');
        window.chatbotAsyncInit = function () {
            ChatBotSDK.init({
                clientId: window.appSettings.portalId,
                platform: isDesktop ? 0 : 1,
                flowTag: 'new_list', sourceTag: 'listing_page',
                toolTipText: "Need Help? Chat with our<br/>certified Travel Expert Now!",
                logEvent: null, 
                chatBotEvent: null,
                layoutSettingIcon, layoutSettingIfame, layoutSettingIconToolTip
            }, function () {
               if (ChatBotSDK.eventHistory.length > 0) {
                    ChatBotSDK.eventHistory.forEach(element => {
                        ChatBotSDK.executeEventHistory.apply(null, element);
                    });
                }
            });
        }
       
    }
    const layoutSettingIcon = {
        height: "55px",
        width: "55px",
        bottom: "0px",
        position: "fixed",
        right: "0px",
        border: "none",
        display: "block"
    }
    const layoutSettingIfame = {
        height: "100%",
        width: "100%",
        zIndex: "100"
    }
    const layoutSettingIconToolTip = {
        height: "60px",
        width: "21rem",
        bottom: "0px",
        position: "fixed",
        right: "0px",
        border: "none",
        display: "block"
    }
    const handleArgs = (args) => {
        if (ChatBotSDK.executeEventHistory) {
            ChatBotSDK.executeEventHistory.apply(null, args);
        } else {
            ChatBotSDK.eventHistory.push(args);
        }
    }
    const tracking = (setChatIconShown) => {
        const chatIconShownTrue = () => {
            setChatIconShown && setChatIconShown(true);
        };
        window.ChatBotSDK.off("iframe-rendered", chatIconShownTrue);

        window.ChatBotSDK.on("iframe-rendered", chatIconShownTrue);
    };
    return { init, tracking };
})();
export default ChatSdk;
***********************************************************8
Alter Proc SP_DTTripMemoryInsert
(
@TransactionId int,
@PersonGuid uniqueidentifier,
@Version int,
@Title varchar(255),
@Content Text,
@PlaceOfIntrest varchar(255),
@TripMemoryID int output
)

As
Begin

	SET NOCOUNT ON

	DECLARE @ParentTripMemoryID int, @currentDateTime datetime = SYSDATETIME()

	INSERT INTO TripMemory (TransactionId,PersonGuid,Title,Content,PlaceOfIntrest,ModifiedOn,Version,Status,isDeleted)
		values (@TransactionId,@PersonGuid,@Title,@Content,@PlaceOfIntrest,@currentDateTime,@Version,0,0)
	select @ParentTripMemoryID = SCOPE_IDENTITY();

	INSERT INTO TripMemory (ParentTripMemoryID,TransactionId,PersonGuid,Title,Content,PlaceOfIntrest,ModifiedOn,Version,Status,isDeleted)
		values (@ParentTripMemoryID,@TransactionId,@PersonGuid,@Title,@Content,@PlaceOfIntrest,@currentDateTime,@Version,0,0)
	select @TripMemoryID = SCOPE_IDENTITY();

End
GO


using AirConfirmationApi;
using AirConfirmationApi.BussinessObjects;
using AirConfirmationApi.DatabaseAccess;
using AirConfirmationApi.HealthCheck;
using AirConfirmationApi.Logger;
using AirConfirmationApi.Services.Airport;
using AirConfirmationApi.Services.Ancillary;
using AirConfirmationApi.Services.BookingData;
using AirConfirmationApi.Services.Bundle;
using AirConfirmationApi.Services.Cockpit;
using AirConfirmationApi.Services.Context;
using AirConfirmationApi.Services.GST;
using AirConfirmationApi.Services.Loyalty;
using AirConfirmationApi.Services.MealLounge;
using AirConfirmationApi.Services.PassNFly;
using AirConfirmationApi.Services.TerminalInfo;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.OpenApi.Models;
using NLog;
using NLog.Web;
using System.Net.Http.Headers;
using System.Text.Json.Serialization;

var logger = LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
logger.Debug("init main");

try
{
    var builder = WebApplication.CreateBuilder(args);

    var env = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
    var nlogPath = env == "Production" ? "/nlog.config" : $"/nlog.{env}.config";
    LogManager.LoadConfiguration(string.Concat(Directory.GetCurrentDirectory(), nlogPath));
    builder.Logging.ClearProviders().AddConsole();
    builder.Logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);
    builder.Host.UseNLog();
    Log.SetLogger(logger);

    // Add services to the container.
    var config = builder.Configuration;
    config.AddJsonFile("appsettings.json").AddJsonFile($"appsettings.{env}.json", optional: true);
    var connectionStrings = config.GetSection("ConnectionStrings").Get<ConnectionStrings>();
    var loyaltySettings = config.GetSection("LoyaltySettings").Get<LoyaltySettings>();
    var bundleSettings = config.GetSection("BundleApiSettings").Get<BundleDetailsRequest>();
    var commonServiceUrl = config.GetSection("CommonServiceUrl").Get<string>();
    var commonAncillarySettings = config.GetSection("CommonAncillarySettings").Get<CommonAncillaryDetails>();
    var gstSettings = config.GetSection("GSTSettings").Get<GstDetails>();
    var passNFlySettings = config.GetSection("PassNFlySettings").Get<PassNFlySettings>();
    var ccdBookingDataApi = config.GetSection("CcdBookingDataApi").Get<CcdBookingDataRequest>();
    var cockpitSettingsUrl = config["CockpitSettingsUrl"];
    var portalIds = config.GetSection("Portals").Get<List<int>>();

    builder.Services.AddAutoMapper(typeof(AutoMapperProfile).Assembly);
    builder.Services.AddControllers().AddJsonOptions(x =>
    {
        // serialize enums as strings in api responses (e.g. Role)
        x.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
    });

    // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
    builder.Services.AddEndpointsApiExplorer();
    builder.Services.AddApplicationInsightsTelemetry();
    builder.Services.AddSwaggerGen();
    builder.Services.AddSingleton<IDatabaseRepository>(x => new DatabaseRepository(connectionStrings.ConnectionStringReadDatabase,
        connectionStrings.ConnectionStringAlternateLogDatabase, connectionStrings.ConnectionStringLogDatabase, connectionStrings.ConnectionStringBackOffice, connectionStrings.ConnectionStringReportDatabase));
    builder.Services.AddSingleton<ICockpitService>(x => new CockpitService(cockpitSettingsUrl, portalIds));
    builder.Services.AddSingleton<ILoyaltyService>(x => new LoyaltyService(loyaltySettings));
    builder.Services.AddSingleton<IAirlineService>(x => new AirlineService(commonServiceUrl ?? ""));
    builder.Services.AddSingleton<IAirportService>(x => new AirportService(commonServiceUrl ?? ""));
    builder.Services.AddSingleton<IPassNFlyService>(x => new PassNFlyService(passNFlySettings ?? new PassNFlySettings()));
    builder.Services.AddSingleton<IBundleService>(x => new BundleService(bundleSettings));
    builder.Services.AddSingleton<ICommonAncillaryService>(x => new CommonAncillaryService(commonAncillarySettings ?? new CommonAncillaryDetails()));
    builder.Services.AddSingleton<IMealLoungeService>(x => new MealLoungeService(commonAncillarySettings ?? new CommonAncillaryDetails()));
    builder.Services.AddSingleton<IGstService>(x => new GstSevice(gstSettings));
    builder.Services.AddHttpClient<IBookingDataService, BookingDataService>((client) =>
    {
        client.BaseAddress = new Uri(ccdBookingDataApi.URL);
        client.Timeout = TimeSpan.FromMilliseconds(ccdBookingDataApi.TimeOut);
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    });
    builder.Services.AddSingleton<ITerminalInfoService>(x => new TerminalInfoService());
    builder.Services.AddScoped<IAirContext>(x => new AirContext());

    //health check
    builder.Services.AddHealthChecks().AddCheck<CockpitApiHealthCheck>("CockpitApiHealth");

    var app = builder.Build();
    app.Logger.LogInformation("Host created");
    await app.Services.GetRequiredService<ICockpitService>().LoadCockpitSettingsAsync();
    await app.Services.GetRequiredService<IAirportService>().LoadAirportData();
    await app.Services.GetRequiredService<IAirlineService>().LoadAirlineDetails();
    // Configure the HTTP request pipeline.
    app.Use(async (context, next) =>
    {
        var airContext = context.RequestServices.GetService<IAirContext>();
        airContext.Init(context.Request);
        airContext.SetDependencies(context.RequestServices, context.Request);
        await next();
    });
    // No Cache Headers
    app.Use(async (context, next) =>
    {
        context.Response.Headers.Add("Cache-Control", "private, no-cache, no-store, must-revalidate");
        context.Response.Headers.Add("Expires", "-1");
        context.Response.Headers.Add("Pragma", "no-cache");
        await next();
    });
    if (app.Environment.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
		if (Environment.UserDomainName == "CORP") //support in local machine
		{
			app.UseSwagger();
			app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "AirConfirmationApi v1"));
		}
		else
		{
			app.UseSwagger(options =>
			{
				options.PreSerializeFilters.Add((swagger, httpReq) =>
				{
					swagger.Servers = new List<OpenApiServer>() { new OpenApiServer() { Url = $"https://{httpReq.Host}/airconfirmationapi" } };
				});
			});
			app.UseSwaggerUI(c => c.SwaggerEndpoint("/airconfirmationapi/swagger/v1/swagger.json", "AirConfirmationApi v1"));
		}
        app.UseCors(builder => builder
            .AllowAnyOrigin()
            .AllowAnyMethod()
            .AllowAnyHeader());
    }
    else
    {
        app.UseHttpsRedirection();
    }
    app.UseRouting();
    app.UseAuthorization();
    app.MapControllers();
    app.UseHealthChecks("/healthcheck", new HealthCheckOptions()
    {
        Predicate = _ => true,
        AllowCachingResponses = false
    });
    app.UseHealthChecks("/ping", new HealthCheckOptions()
    {
        Predicate = _ => false,
    });
    app.Run();
}
catch (Exception exception)
{
    //NLog: catch setup errors
    logger.Error(exception, "Stopped program because of exception");
    throw;
}
finally
{
    // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)
    LogManager.Shutdown();
}


index.js:10 Uncaught (in promise) TypeError: (0 , _api__WEBPACK_IMPORTED_MODULE_0__.tripmemoryApi) is not a function
    at _callee$ (index.js:10:41)
    at tryCatch (index.js:2:1)
    at Generator.<anonymous> (index.js:2:1)
    at Generator.next (index.js:2:1)
    at asyncGeneratorStep (index.js:2:1)
    at _next (index.js:2:1)
    at index.js:2:1
    at new Promise (<anonymous>)
    at index.js:2:1
    at index.js:27:2
_callee$	@	index.js:10
tryCatch	@	index.js:2
(anonymous)	@	index.js:2
(anonymous)	@	index.js:2
asyncGeneratorStep	@	index.js:2
_next	@	index.js:2
(anonymous)	@	index.js:2
(anonymous)	@	index.js:2
(anonymous)	@	index.js:27
(anonymous)	@	index.js:8
boundActionCreators.<computed>	@	bindActionCreators.js:8
componentDidMount	@	tripMemory.desktop.js:20
commitLifeCycles	@	react-dom.development.js:20663
commitLayoutEffects	@	react-dom.development.js:23426
callCallback	@	react-dom.development.js:3945
invokeGuardedCallbackDev	@	react-dom.development.js:3994
invokeGuardedCallback	@	react-dom.development.js:4056
commitRootImpl	@	react-dom.development.js:23151
unstable_runWithPriority	@	scheduler.development.js:468
runWithPriority$1	@	react-dom.development.js:11276
commitRoot	@	react-dom.development.js:22990
performSyncWorkOnRoot	@	react-dom.development.js:22329
(anonymous)	@	react-dom.development.js:11327
unstable_runWithPriority	@	scheduler.development.js:468
runWithPriority$1	@	react-dom.development.js:11276
flushSyncCallbackQueueImpl	@	react-dom.development.js:11322
flushSyncCallbackQueue	@	react-dom.development.js:11309
scheduleUpdateOnFiber	@	react-dom.development.js:21893
enqueueSetState	@	react-dom.development.js:12467
push../node_modules/react/cjs/react.development.js.Component.setState	@	react.development.js:365
LoadableComponent._setStateWithMountCheck	@	index.js:275
(anonymous)	@	index.js:331
step	@	index.js:76
(anonymous)	@	index.js:57
fulfilled	@	index.js:48
Promise.then (async)		
step	@	index.js:50
(anonymous)	@	index.js:51
__webpack_modules__../node_modules/@react-loadable/revised/index.js.__awaiter	@	index.js:47
LoadableComponent._loadModule	@	index.js:278
LoadableComponent	@	index.js:242
constructClassInstance	@	react-dom.development.js:12716
updateClassComponent	@	react-dom.development.js:17425
beginWork	@	react-dom.development.js:19073
beginWork$1	@	react-dom.development.js:23940
performUnitOfWork	@	react-dom.development.js:22779
workLoopSync	@	react-dom.development.js:22707
renderRootSync	@	react-dom.development.js:22670
performSyncWorkOnRoot	@	react-dom.development.js:22293
(anonymous)	@	react-dom.development.js:11327
unstable_runWithPriority	@	scheduler.development.js:468
runWithPriority$1	@	react-dom.development.js:11276
flushSyncCallbackQueueImpl	@	react-dom.development.js:11322
flushSyncCallbackQueue	@	react-dom.development.js:11309
scheduleUpdateOnFiber	@	react-dom.development.js:21893
enqueueSetState	@	react-dom.development.js:12467
push../node_modules/react/cjs/react.development.js.Component.setState	@	react.development.js:365
LoadableComponent._setStateWithMountCheck	@	index.js:275
(anonymous)	@	index.js:331
step	@	index.js:76
(anonymous)	@	index.js:57
fulfilled	@	index.js:48
Promise.then (async)		
step	@	index.js:50
(anonymous)	@	index.js:51
__webpack_modules__../node_modules/@react-loadable/revised/index.js.__awaiter	@	index.js:47
LoadableComponent._loadModule	@	index.js:278
LoadableComponent	@	index.js:242
constructClassInstance	@	react-dom.development.js:12716
updateClassComponent	@	react-dom.development.js:17425
beginWork	@	react-dom.development.js:19073
beginWork$1	@	react-dom.development.js:23940
performUnitOfWork	@	react-dom.development.js:22779
workLoopSync	@	react-dom.development.js:22707
renderRootSync	@	react-dom.development.js:22670
performSyncWorkOnRoot	@	react-dom.development.js:22293
scheduleUpdateOnFiber	@	react-dom.development.js:21881
updateContainer	@	react-dom.development.js:25482
(anonymous)	@	react-dom.development.js:26021
unbatchedUpdates	@	react-dom.development.js:22431
legacyRenderSubtreeIntoContainer	@	react-dom.development.js:26020
hydrate	@	react-dom.development.js:26086
(anonymous)	@	index.js:179
Promise.then (async)		
./src/shared/index.js	@	index.js:178
__webpack_require__	@	bootstrap:21
checkDeferredModulesImpl	@	jsonp chunk loading:571
__webpack_require__.x	@	jsonp chunk loading:584
(anonymous)	@	startup:3
(anonymous)
